Ever feel like uh you're playing career chess?

Yeah.

You know, like trying to figure out your next best move.

Oh, yeah.

Well, today, yeah, we're taking a deep dive into someone else's game.

Okay.

Using a software developer's impressive resume as our board.

Interesting.

This is David Watson.

Okay.

And he's been everywhere. Startups, big companies like Caterpillar,

even Carnegie Melon.

What's fascinating about David's journey is that it's not just a straight line.

Yeah.

It's more like a winding path that reveals the changing demands and exciting opportunities in software development over the last two decades.

Yeah. This isn't just a chronological list of jobs. We're going to use it to figure out what skills you need to thrive in this world.

Gotcha.

So, strap in.

All right.

Because we're about to uncover some hidden gems about what it really takes to succeed in software.

David's story starts with something you wouldn't expect.

Okay.

He wins a computer science award, does a programming internship,

all while attending music school.

Wow. So, he's blend

it's like he's blending creativity and logic from the very beginning.

That makes me think about the whole left brain, right brain thing.

Yeah.

Could this multidisciplinary approach be a secret weapon for software developers?

There's definitely a growing demand for what's called T-shaped professionals. Think of it like this. Okay. The vertical part of the tea is deep expertise in one area.

Like coding.

Like coding. Yeah. The horizontal part is broad knowledge in other fields.

I see. I see.

So maybe David's music background makes him a better software designer.

Yeah.

Able to create elegant solutions that are almost musical in their structure.

Okay. So we have multi-talented David,

fresh out of school,

right?

He dives headirst into the startup world with a company called Cobbind.

Okay.

A Linux startup. Cool.

In the early 2000s.

Oh wow.

Remember this was when open source was really starting to take off with Companies like Red Hat and CSSE becoming major players.

Kobe's goal was to tightly connect applications to their operating systems.

Oh, interesting.

Like how software works in things like your smart refrigerator or car.

I see.

Now, imagine if they had succeeded.

Okay.

Could this have led to a world where software seamlessly moved between different devices?

Oh, like a

almost like a universal language.

And get this, David actually spoke to Ian Murdoch.

Wow.

The creator of Debian Linux.

Don't talk about being in the right place at the right time,

right?

That's the beauty of the open- source movement.

Yeah,

it was and still is all about

collaboration and shared learning. Yeah,

it wasn't just about writing code. It was about building a community.

Next up, David Lans at Mayi Design.

Okay,

now hold on to your hats because the projects here are all over the map.

A+ schools, 3RC,

even homeland security applications.

Wow.

And on top of that, he's doing rapid prototyping for Philips lighting.

This shows how software was shifting from isolated programs on your computer

to interconnected systems that talk to each other.

Think about it. Web services, APIs, these are the building blocks of the internet as we know it today.

And David's not just coding in a vacuum at May.

Yeah.

They're big on design thinking,

which means putting the user at the center of everything,

right?

So, it's not just about making the software work, it's about making it delightful to use.

This was a key turning point. In software development, it wasn't enough to just have technical skills.

You needed to understand how people interact with technology and design solutions that meet their needs.

So, at this point, David has experience with startups, big companies, right?

And even a taste of the academic world.

Yeah.

What would you say he's learned so far that will be valuable later on?

The ability to adapt is huge.

Yeah.

The software landscape is constantly evolving. So, being able to pick up new skills and switch between different typ of projects is key.

Mhm.

Imagine it like being a musical chameleon,

right?

Blending into whatever environment you're in.

That's a perfect analogy considering his musical background.

Yeah.

And speaking of blending skills,

yeah,

looking further down David's resume,

we start to see data analysis popping up more and more.

Okay.

Python, pandas,

building data pipelines.

This coincides with the explosion of big data,

right?

Suddenly, companies had mountains of information. and they needed people who could make sense of it all. It wasn't just about writing code anymore. It was about extracting insights from data and using that knowledge to make better decisions.

It's fascinating how David's career reflects these big trends in the tech world.

Yeah.

But wait, even while everyone's buzzing about data,

he takes on a challenge at Caterpillar.

Okay.

He needs to optimize C++ code.

Wow.

To squeeze every bit of performance out of their hardware.

This shows that even in a datadriven world,

yeah,

core programming skills are still essential,

right?

Think of it like this. You need a solid foundation to build a skyscraper. No matter how fancy the design,

you're saying it's not an either situation. Right.

You can be a data wiz coding ninja.

Exactly.

Which makes you even more valuable.

The best software professionals have a diverse toolbox.

They can analyze data, build robust systems, and de understand the user. needs.

Okay, I'm starting to see the pattern here,

right?

David's journey is showing us that adaptability, strong technical skills, and a user centric approach

are crucial for success in software.

And hold on because it gets even more interesting. Okay,

when we dive into David's freelance work,

right,

this is where he starts playing with some cutting edge stuff. Okay,

GPT and Rust.

Oo,

this is where the future of software really starts to take shape,

right? Let's unpack that in the next part.

Yeah. definitely hook.

Okay, remember how we left off with David diving into the world of freelance work? Well, this is where he starts playing with GPT and Rust.

Two technologies that are shaping the future of software.

Yeah, that really piqued my interest. Okay.

For those of us who aren't coding every day,

Yeah.

could you break down what makes these technologies so special?

Imagine you have a massive library of knowledge.

Okay.

But it's all jumbled up.

Yeah.

GPT is like a superpowered librarian who can not only organize it, but also understand the relationships between different pieces of information.

Interesting.

It can even generate new ideas based on what it's learned.

So, it's not just about storing information, right?

It's about making that information useful and insightful.

Exactly.

I'm starting to see how this connects to David's work on personal knowledge management or PKM.

Exactly. PKM is all about building systems to capture, organize, and connect your ideas. Okay. And David's using GPT to take this to a whole new level. That's incredible. It's almost like having an AI assistant

that helps you think better and make connections you might have missed.

Now add Rust to the mix

and things get even more powerful.

Rust is known for its speed and reliability, making it perfect for building the core of these advanced PKM systems.

So it's like having a high performance engine under the hood.

Yeah.

Allowing the system to handle massive amounts of data and complex operations without breaking a sweat.

And to top it off, David's using a library called Polers,

which is like a turbocharger for data analysis.

Gotcha.

It helps him slice and dice information with incredible efficiency.

It sounds like he's building something truly revolutionary.

Yeah.

This could change how we learn, work, and even think.

It's a glimpse into the future of knowledge work, where AI and humans collaborate to amplify each other's strengths.

Now, I'm curious, how did David gain the skills to work with these cutting edge technologies?

Did he go back to school?

Well, one thing that stands out about David is his commitment to continuous learning.

He's constantly experimenting with new tools and languages, pushing himself to stay ahead of the curve.

So, it's not just about formal education, right?

It's about that constant curiosity and willingness to explore new territories.

Exactly. In the tech world, things move so fast that if you're not learning

Yeah.

you're falling behind.

This really resonates with me.

I've been thinking about taking an online course on machine learning.

Yeah.

But It all seems so intimidating.

It's understandable to feel overwhelmed. Yeah.

But remember, even David had to start somewhere, right? He didn't become a GPT expert overnight.

It was a process of exploration, experimentation,

and learning from his mistakes.

So, the key is to just dive in and start tinkering.

Yeah.

Even if it feels messy at first.

That's the spirit. The beauty of software is that you can try things out, break things, and learn from the process. It's a very iterative and forgiving field in that sense.

Okay, I'm feeling more inspired now.

Good.

But let's switch gears for a moment.

Okay.

And talk about David's experience at Caterpillar.

Yeah.

It seems like a big jump from the world of startups and cutting edge tech.

It might seem that way.

Yeah.

But it highlights a crucial point.

Software is everywhere,

even in industries you wouldn't expect.

Right. Even heavy machinery giants like Caterpillar need software to optimize their operations.

Exactly.

Improve efficiency and stay competitive.

At Caterpillar, David was tasked with optimizing C++ code

for their ZCU 104 MPC platform.

Okay.

Think of it like fine-tuning a high performance engine.

I see.

To get the most power and efficiency out of it.

So, even in the world of bulldozers and excavators,

yeah,

there's a need for skilled software developers who can squeeze every ounce of performance out of the hardware.

And it's not just about raw performance either.

Okay.

David's work also involved ensuring the software was reliable, stable, and could handle the demanding conditions of a construction site.

This reminds me of something you said earlier about the importance of having a strong foundation and core programming skills.

Absolutely. Whether you're building a web application, analyzing data, or optimizing code for heavy machinery, those fundamental principles of software development are always relevant.

So even if you're dreaming of working on cutting edge AI projects,

yeah,

don't neglect those core skills. They're the bedrock of a successful software career.

And one more thing about David's time at Caterpillar. Okay.

It shows us the importance of domain knowledge.

He had to learn about the specifics of heavy machinery.

Yeah.

The challenges faced by Caterpillar and how software could be used to solve those problems.

So it's not just about being a coding expert,

right?

It's about understanding the context in which the software will be used.

Exactly. The best software developers are those who can bridge the gap between technology and the real world problems it's meant to solve.

This is giving me a lot to think about.

Yeah,

it seems like a successful software career is a blend of technical expertise,

adaptability, continuous learning,

and a willingness to step outside your comfort zone.

You've hit the nail on the head. And that's precisely what we see throughout David's journey. He's constantly challenging himself, learning new things. Yeah.

And applying his skills in diverse contexts.

It's truly inspiring. But, you know, we haven't even TKED talked about his experience leading and managing software development teams,

right?

That's a whole other layer of complexity and responsibility.

Yeah. Right. Let's delve into that next.

Okay.

Because as we've seen, technical skills are just one part of the equation. Yeah.

Being able to lead, inspire, and collaborate effectively is equally crucial for success in the world of software.

Okay. So, we've seen how David's journey highlights the importance of technical skills and adaptability and a willingness to learn.

Yeah.

But as you mentioned,

there's Another crucial element to success in software leadership.

That's right. As software projects become more complex involving larger teams and tighter deadlines, the ability to lead and manage effectively becomes paramount.

And David's resume shows he's no stranger to leadership roles. He's been a co-founder VP of engineering and a software development manager.

Yeah.

What can we learn from his experience in these positions?

Let's take his time at hire and esquire for example.

Okay.

He was brought in to lead a team of six devel velopers through a major overhaul of their legacy Django system.

Django is a popular web framework for Python, right?

Yeah.

So, it sounds like they had a website built with Django that needed a serious upgrade.

Exactly. And this wasn't just about adding a few new features.

They needed to redesign and refactor significant portions of the code base. Right.

Which is a delicate and complex process.

I can imagine that comes with its own set of challenges. Yeah.

You're dealing with existing potential bugs and the risk of breaking things that are already working.

You got it. And on top of that, yeah,

he needed to keep the website running smoothly throughout the transition.

Wow. So,

imagine trying to renovate a house while people are still living in it.

That's a great analogy.

Yeah.

So, how did he manage to pull it off?

Well, one thing that stands out about David's leadership style,

Yeah.

is his ability to build trust and empower his team members.

Okay.

He doesn't micromanage.

Instead, he creates a collaborative environment where everyone feels ownership. of the project.

That makes sense.

Yeah.

If you want people to be invested in the success of a project,

right,

you need to give them the freedom and responsibility to contribute their best work.

Exactly. And David's success at hire and esquire demonstrates how effective leadership can not only improve the technical quality of project,

but also boost team morale and productivity.

And his experience at Wellspring Worldwide further reinforces this idea.

Okay.

He led a team of 12 through a massive migration. Wow.

Moving a million lines of code from a legacy data center to a modern cloud-based system.

That's like moving an entire library from one building to another, making sure every book is in the right place and nothing gets lost or damaged.

And not only that,

he had to ensure the transition was seamless and didn't disrupt Wellspring's operations.

Yeah,

that takes serious planning, communication, and leadership skills.

You're absolutely right. This kind of largecale migration involves a lot of moving parts, technical complexities, and potential risks.

Yeah,

it requires a leader who can keep everyone on track,

make tough decisions when needed,

and maintain a sense of calm amidst the chaos.

It sounds like David thrives in these challenging situations.

He does.

He's not just a skilled coder. He's a problem solver who can rally a team and get things done.

And that's a valuable lesson for anyone aspiring to lead software development teams.

Yeah.

It's not just about technical expertise.

It's about building relationships, fostering communication, and inspiring others to do their best work.

So, it seems like David's journey shows us that a successful software career isn't just about coding prowess.

Great.

It's about being a well-rounded individual who can adapt, learn, lead, and collaborate effectively.

Precisely. And it's about embracing the everanging nature of the tech world, always seeking new challenges and opportunities to grow.

David's story has given us so much to think about.

Yeah, it has.

From the importance of a strong technical foundation to the power of continuous learning

and the essential role of leadership.

It's a reminder that a software career is a journey, not a destination.

It's about constantly evolving, expanding your skills, and finding ways to make a meaningful impact on the world through technology.

And as we wrap up this deep dive, I want to leave you with a question.

Okay?

What will your software journey look like?

Think about the problems you're passionate about solving, the skills you want to develop. Yeah.

And the impact you want to have.

And remember, there's no single right path,

right?

Your journey will be unique just like David's.

So, embrace the challenge, stay curious, and never stop exploring the vast and ever evolving world of software development.

Thanks for joining us on this fascinating exploration of David Watson's career.

Yeah, thanks for listening.

We hope it's inspired you to think about your own journey in the exciting world of software. Until next time, keep learning, keep coding, and keep pushing the boundaries of what's possible.

